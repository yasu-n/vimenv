#!/usr/bin/env bash
#
# Summary: Set or show the local application-specific vim version
#
# Usage: vimenv local <version>
#        vimenv local --unset
#
# Sets the local application-specific vim version by writing the
# version name to a file named `.vim-version'.
#
# When you run a vim command, vimenv will look for a `.vim-version'
# file in the current directory and each parent directory. If no such
# file is found in the tree, vimenv will use the global vim version
# specified with `vimenv global'. A version specified with the
# `VIMENV_VERSION' environment variable takes precedence over local
# and global versions.
#
# For backwards compatibility, vimenv will also read version
# specifications from `.vimenv-version' files, but a `.vim-version'
# file in the same directory takes precedence.
#
# <version> should be a string matching a vim version known to vimenv.
# The special version string `system' will use your default system vim.
# Run `vimenv versions' for a list of available vim versions.

set -e
[ -n "$VIMENV_DEBUG" ] && set -x

# Provide vimenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec vimenv-versions --bare
fi

VIMENV_VERSION="$1"

if [ "$VIMENV_VERSION" = "--unset" ]; then
  rm -f .vimenv-version
elif [ -n "$VIMENV_VERSION" ]; then
  vimenv-version-file-write .vimenv-version "$VIMENV_VERSION"
else
  if version_file="$(vimenv-version-file "$PWD")"; then
    vimenv-version-file-read "$version_file"
  else
    echo "vimenv: no local version configured for this directory" >&2
    exit 1
  fi
fi
